<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <meta http-equiv="X-UA-Compatible" content="ie=edge">
  <title>Document</title>
</head>
<body>
  <script>
  //  Promise 是一个对象，不是函数。
  // 对象可以用来保存变量状态，但是函数不行（闭包除外）
  // 使用promise第一步
  // 第二步 将异步代码写入箭头函数中
   const promise = new Promise((resolve, reject) => {
      // promise 的三种状态 pending/进行中 fulfilled/已成功 rejected/已失败  
      wx.getSystemInfo({
        success: (res) => {
          //初始化 promise 时候就是pending 状态，通过使用resolve 和 reject来改变状态。
          resolve(res) //此时状态由进行中转换成已成功。记住状态已凝固，不可逆。
        },
        fail(error) {
          reject(error)
        }
      })
    })
    //第三步使用对象的then 方法，传入两个函数，一个是成功后执行什么，一个则是失败执行。顺序不可逆
    promise.then((res) => {
      console.log(res)
    }, (error) => {
      console.log(error)
    })
    
bookModel.getHotList()
.then( res=> {
console.log(res)
return bookModel.getMyBookCount()
})
.then( res=> {
console.log(res)
return bookModel.getHotList()
})
.then( res=> {
console.log(res)
})
//Promise 的错误用法 还是属于回调地狱、
// const hotlist = bookModel.getHotList()
// hotlist.then(
// res => {
// console.log(res)
// bookModel.getMyBookCount().then(res=> {
// console.log(res)
// bookModel.getHotList().then(res=> {
// console.log(res)
// })
// })
// }
// )
  </script>
</body>
</html